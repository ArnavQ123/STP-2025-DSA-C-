//Efficient Sorting vs Bubble Sort & Tracing Binary Search Iterations on a Sorted Array
class Solution {
  public:
    void sort012(vector<int>& arr) {
        int low = 0, mid = 0;
        int high = arr.size() - 1;

        while (mid <= high) {
            if (arr[mid] == 0) {
                swap(arr[low], arr[mid]);
                low++;
                mid++;
            }
            else if (arr[mid] == 1) {
                mid++;
            }
            else { 
                swap(arr[mid], arr[high]);
                high--;
                
            }
        }
    }
};

//*
int binarySearchWithTracking(const vector<int>& arr, int target) {
        int low = 0, high = arr.size() - 1;
        int iterations = 0;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            iterations++;

            cout << "Iteration " << iterations << ": mid = " << mid 
                 << ", value = " << arr[mid] << endl;

            if (arr[mid] == target) {
                cout << "Target found in " << iterations << " iterations.\n";
                return mid;
            }
            else if (arr[mid] < target) {
                low = mid + 1;
            }
            else {
                high = mid - 1;
            }
        }
